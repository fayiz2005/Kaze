// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  role Role @default(ADMIN)

  accounts Account[]
  sessions Session[]

  comments Comment[] // Add this
  ratings  Rating[] // Add this
  orders   Order[] // Add this
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
}

model Invitation {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now()) // Add default value temporarily
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  products Product[]
}

enum SizeType {
  STANDARD // XS, S, M, L, XL, XXL
  WAIST // e.g., 30/32, 32/30
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  ratingAvg   Float    @default(0)
  createdAt   DateTime @default(now())
  image       String   @default("")
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  comments Comment[]
  ratings  Rating[]

  orderItems OrderItem[] @relation("ProductToOrderItems")

  variants ProductVariant[]  
}

model ProductVariant {
  id        String  @id @default(uuid())
  sizeType  String
  sizeValue String
  stock     Int
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // âœ… Reverse relation
  orderItems OrderItem[] @relation("VariantToOrderItems")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Rating {
  id        String   @id @default(uuid())
  score     Int // 1 to 5
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  total     Float

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  phone          String
  isSent         Boolean     @default(false)
  sentAt      DateTime?
  fullName      String
  email         String
  address       String
  city          String
  postalCode    String
  paymentMethod String
  items OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation("ProductToOrderItems", fields: [productId], references: [id], onDelete: Cascade)

  variantId String?
  variant   ProductVariant? @relation("VariantToOrderItems", fields: [variantId], references: [id], onDelete: Cascade)
}
